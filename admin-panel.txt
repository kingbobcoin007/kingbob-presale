// src/components/AdminPanel.tsx
import React, { useState, useEffect } from 'react';
import { collection, getDocs, doc, updateDoc, query, orderBy } from 'firebase/firestore';
import { signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { auth, db, usersCollection, settingsCollection } from '../firebase';

interface User {
  id: string;
  address: string;
  package: string | null;
  tokenBalance: number;
  refillCount: number;
  referralRewards: number;
  claimEnabled: boolean;
  createdAt: string;
}

const AdminPanel: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  const [error, setError] = useState('');
  const [globalClaimEnabled, setGlobalClaimEnabled] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortField, setSortField] = useState<keyof User>('createdAt');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');

  useEffect(() => {
    const checkAuth = () => {
      const unsubscribe = auth.onAuthStateChanged(user => {
        setIsAuthenticated(!!user);
        if (user) {
          fetchUsers();
          fetchSettings();
        }
      });
      
      return unsubscribe;
    };
    
    const unsubscribe = checkAuth();
    return () => unsubscribe();
  }, []);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setIsAuthenticated(true);
      fetchUsers();
      fetchSettings();
    } catch (err: any) {
      setError(err.message || 'Failed to login');
    } finally {
      setIsLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await signOut(auth);
      setIsAuthenticated(false);
    } catch (err: any) {
      setError(err.message || 'Failed to logout');
    }
  };

  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const q = query(collection(db, usersCollection), orderBy(sortField, sortDirection));
      const querySnapshot = await getDocs(q);
      
      const usersData: User[] = [];
      querySnapshot.forEach((doc) => {
        usersData.push({
          id: doc.id,
          ...doc.data(),
        } as User);
      });
      
      setUsers(usersData);
    } catch (err: any) {
      setError(err.message || 'Failed to fetch users');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchSettings = async () => {
    try {
      const settingsRef = doc(db, settingsCollection, 'global');
      const settingsSnap = await getDocs(collection(db, settingsCollection));
      
      if (!settingsSnap.empty) {
        const settingsData = settingsSnap.docs[0].data();
        setGlobalClaimEnabled(settingsData.claimEnabled || false);
      }
    } catch (err) {
      console.error('Error fetching settings:', err);
    }
  };

  const toggleGlobalClaim = async () => {
    try {
      const settingsRef = doc(db, settingsCollection, 'global');
      await updateDoc(settingsRef, {
        claimEnabled: !globalClaimEnabled
      });
      
      setGlobalClaimEnabled(!globalClaimEnabled);
      
      // Update all users' claim status
      const batch = db.batch();
      users.forEach(user => {
        const userRef = doc(db, usersCollection, user.id);
        batch.update(userRef, { claimEnabled: !globalClaimEnabled });
      });
      
      await batch.commit();
      
      // Refresh user list
      fetchUsers();
    } catch (err: any) {
      setError(err.message || 'Failed to update claim status');
    }
  };

  const toggleUserClaim = async (userId: string, currentStatus: boolean) => {
    try {
      const userRef = doc(db, usersCollection, userId);
      await updateDoc(userRef, {
        claimEnabled: !currentStatus
      });
      
      // Update local state
      setUsers(users.map(user => 
        user.id === userId ? { ...user, claimEnabled: !currentStatus } : user
      ));
    } catch (err: any) {
      setError(err.message || 'Failed to update user claim status');
    }
  };

  const handleSort = (field: keyof User) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const filteredUsers = users.filter(user => {
    if (!searchQuery) return true;
    
    const query = searchQuery.toLowerCase();
    return (
      user.address.toLowerCase().includes(query) ||
      (user.package && user.package.toLowerCase().includes(query))
    );
  });

  if (!isAuthenticated) {
    return (
      <section className="py-12 px-4">
        <div className="max-w-md mx-auto">
          <h2 className="text-3xl font-bold text-center mb-6 text-red-800">Admin Login</h2>
          
          <form onSubmit={handleLogin} className="bg-gradient-to-r from-red-50 to-yellow-50 rounded-xl shadow-lg p-6 border border-yellow-200">
            {error && (
              <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-lg">
                {error}
              </div>
            )}
            
            <div className="mb-4">
              <label className="block text-gray-700 mb-2" htmlFor="email">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              />
            </div>
            
            <div className="mb-6">
              <label className="block text-gray-700 mb-2" htmlFor="password">
                Password
              </label>
              <input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-500"
                required
              />
            </div>
            
            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-gradient-to-r from-red-700 to-yellow-500 text-white py-2 rounded-lg font-bold shadow-md hover:from-red-600 hover:to-yellow-400 transition-all duration-300 disabled:opacity-70"
            >
              {isLoading ? 'Logging in...' : 'Login'}
            </button>
          </form>
        </div>
      </section>
    );
  }

  return (
    <section className="py-12 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-red-800">Admin Panel</h2>
          <button
            onClick={handleLogout}
            className="bg-gray-200 text-gray-700 py-2 px-4 rounded hover:bg-gray-300 transition-colors"
          >
            Logout
          </button>
        </div>
        
        <div className="bg-gradient-to-r from-red-50 to-yellow-50 rounded-xl shadow-lg p-6 border border-yellow-200 mb-8">
          <div className="flex justify-between items-center">
            <h3 className="text-xl font-bold text-red-800">Global Settings</h3>
            <div className="flex items-center">
              <span className="mr-3">Enable Claiming for All Users:</span>
              <button
                onClick={toggleGlobalClaim}
                className={`relative inline-flex items-center h-6 rounded-full w-11 ${
                  globalClaimEnabled ? 'bg-green-500' : 'bg-gray-300'
                } transition-colors duration-300`}
              >
                <span
                  className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform duration-300 ${
                    globalClaimEnabled ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-red-50 to-yellow-50 rounded-xl shadow-lg overflow-hidden border border-yellow-200">
          <div className="p-6 border-b border-yellow-200">
            <h3 className="text-xl font-bold text-red-800 mb-4">User Management</h3>
            
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="Search by wallet address or package..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-500"
                />
              </div>
              <button
                onClick={fetchUsers}
                className="bg-gradient-to-r from-red-700 to-yellow-500 text-white py-2 px-4 rounded font-bold shadow-md hover:from-red-600 hover:to-yellow-400 transition-all duration-300"
              >
                Refresh Data
              </button>
            </div>
          </div>
          
          {isLoading ? (
            <div className="p-8 text-center">Loading user data...</div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="bg-yellow-100">
                    <th 
                      className="py-3 px-4 text-left text-gray-700 cursor-pointer hover:bg-yellow-200"
                      onClick={() => handleSort('address')}
                    >
                      Wallet Address
                    </th>
                    <th 
                      className="py-3 px-4 text-left text-gray-700 cursor-pointer hover:bg-yellow-200"
                      onClick={() => handleSort('package')}
                    >
                      Package
                    </th>
                    <th 
                      className="py-3 px-4 text-right text-gray-700 cursor-pointer hover:bg-yellow-200"
                      onClick={() => handleSort('tokenBalance')}
                    >
                      Token Balance
                    </th>
                    <th 
                      className="py-3 px-4 text-right text-gray-700 cursor-pointer hover:bg-yellow-200"
                      onClick={() => handleSort('referralRewards')}
                    >
                      Referral Rewards
                    </th>
                    <th 
                      className="py-3 px-4 text-center text-gray-700 cursor-pointer hover:bg-yellow-200"
                      onClick={() => handleSort('claimEnabled')}
                    >
                      Claim Status
                    </th>
                    <th className="py-3 px-4 text-center text-gray-700">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {filteredUsers.length > 0 ? (
                    filteredUsers.map((user) => (
                      <tr key={user.id} className="border-t border-yellow-100 hover:bg-yellow-50">
                        <td className="py-3 px-4 font-medium">
                          {user.address.slice(0, 6)}...{user.address.slice(-4)}
                        </td>
                        <td className="py-3 px-4">
                          {user.package ? user.package.charAt(0).toUpperCase() + user.package.slice(1) : 'None'}
                        </td>
                        <td className="py-3 px-4 text-right">
                          {user.tokenBalance.toLocaleString()}
                        </td>
                        <td className="py-3 px-4 text-right">
                          {user.referralRewards.toLocaleString()}
                        </td>
                        <td className="py-3 px-4 text-center">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            user.claimEnabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                          }`}>
                            {user.claimEnabled ? 'Enabled' : 'Disabled'}
                          </span>
                        </td>
                        <td className="py-3 px-4 text-center">
                          <button
                            onClick={() => toggleUserClaim(user.id, user.claimEnabled)}
                            className={`px-3 py-1 rounded text-xs font-medium ${
                              user.claimEnabled 
                                ? 'bg-red-100 text-red-800 hover:bg-red-200' 
                                : 'bg-green-100 text-green-800 hover:bg-green-200'
                            }`}
                          >
                            {user.claimEnabled ? 'Disable Claim' : 'Enable Claim'}
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={6} className="py-8 text-center text-gray-500">
                        No users found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </section>
  );
};

export default AdminPanel;
